# -*- coding: utf-8 -*-
"""batch_size 32 using CNN model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dizIWS5P3xR11YpLcE9_EYMZh1J167FW
"""

from google.colab import drive
import zipfile
import os


# Path to the zip file in Google Drive
zip_path = '/content/drive/MyDrive/archive.zip'
extract_path = '/content/UTKFace'

# Extract the zip file
with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

import numpy as np
import cv2
import os
from sklearn.model_selection import train_test_split
from tqdm import tqdm  # For progress bar

def load_images_from_folder(folder, img_size=(128, 128)):
    images = []
    ages = []

    # List all files in the folder
    file_list = os.listdir(folder)

    for img_name in tqdm(file_list):  # tqdm for progress bar
        age = int(img_name.split("_")[0])
        img_path = os.path.join(folder, img_name)
        img = cv2.imread(img_path)
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        img = cv2.resize(img, img_size)
        img = img / 255.0  # Scaling the images
        images.append(img)
        ages.append(age)

    return np.array(images), np.array(ages)

# Path to the extracted folder
folder_path = '/content/UTKFace/utkface_aligned_cropped/UTKFace'

# Load images and ages
images, ages = load_images_from_folder(folder_path)

# Split the dataset
x_train, x_test, y_train, y_test = train_test_split(images, ages, test_size=0.2, random_state=42)

x_train.shape

x_test.shape

len(ages)

# Show some sample images
def display_samples(images, labels, num_samples=5):
    plt.figure(figsize=(10, 10))
    for i in range(num_samples):
        plt.subplot(1, num_samples, i + 1)
        plt.imshow(images[i])
        plt.title(f'Age: {labels[i]}')
        plt.axis('off')

    plt.show()

# Display some samples
display_samples(x_train,y_train)

# Import necessary libraries
import numpy as np
import os
import cv2
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential, load_model, Model
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Dropout, BatchNormalization, Flatten, Input
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.optimizers import Adam

# Define the input shape
input_size = (128, 128, 3)

# Define the input layer
inputs = Input(shape=input_size)

# Convo block 1
X = Conv2D(32, (3, 3), activation='relu')(inputs)
X = BatchNormalization(axis=3)(X)
X = MaxPooling2D((3, 3))(X)

# Convo block 2
X = Conv2D(64, (3, 3), activation='relu')(inputs)
X = BatchNormalization(axis=3)(X)
X = MaxPooling2D((3, 3))(X)

# Convo block 3
X = Conv2D(128, (3, 3), activation='relu')(X)
X = MaxPooling2D((2, 2), strides=(2, 2))(X)

# Convo block 4
X = Conv2D(256, (3, 3), activation='relu')(X)
X = MaxPooling2D((2, 2))(X)

# Flatten layer
X = Flatten()(X)

# Dense layers
dense_1 = Dense(256, activation='relu')(X)
dense_2 = Dense(256, activation='relu')(dense_1)
dense_3 = Dense(128, activation='relu')(dense_2)

# Dropout layers
dropout_1 = Dropout(0.5)(dense_1)
dropout_2 = Dropout(0.5)(dense_3)

# Output layer for age prediction
output_2 = Dense(1, name='age_output')(dropout_2)

# Define the model
model = Model(inputs=inputs, outputs=output_2)

model.compile(loss='mae', optimizer='adam', metrics=['mae'])

model.summary()

# Train the model
history = model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=20, batch_size=32)

# Save the model
model.save('age_model_pretrained.h5')

# Plot the training and validation loss
loss = history.history['loss']
val_loss = history.history['val_loss']
epochs = range(1, len(loss) + 1)
plt.plot(epochs, loss, 'y', label='Training loss')
plt.plot(epochs, val_loss, 'r', label='Validation loss')
plt.title('Training and validation loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()
# Plot the training and validation MAE
mae = history.history['mae']
val_mae = history.history['val_mae']
plt.plot(epochs, mae, 'y', label='Training MAE')
plt.plot(epochs, val_mae, 'r', label='Validation MAE')
plt.title('Training and validation MAE')
plt.xlabel('Epochs')
plt.ylabel('MAE')
plt.legend()
plt.show()

# Load the saved model
age_model = load_model('age_model_pretrained.h5', compile=False)

# Test the model
predictions = age_model.predict(x_test)
# Evaluate the model
mae = np.mean(np.abs(predictions - y_test))
print(f'Mean Absolute Error on test set: {mae}')