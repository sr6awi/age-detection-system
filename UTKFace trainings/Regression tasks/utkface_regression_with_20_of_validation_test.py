# -*- coding: utf-8 -*-
"""UTKFace Regression with 20% of validation test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17y8K7VEHs5K_vWOt94d30TCKh-YFwswu
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os
from pathlib import Path
from PIL import Image
import tensorflow as tf
from tensorflow.keras.preprocessing.image import load_img
from sklearn.model_selection import train_test_split
from tensorflow.keras.layers import Dropout, Input, Add, Dense, Activation, BatchNormalization, Flatten, Conv2D, MaxPooling2D, GlobalMaxPooling2D
from tensorflow.keras.models import Model, load_model

path = Path("/content/drive/MyDrive/archive.zip (Unzipped Files)/utkface_aligned_cropped/UTKFace/") #the image folder path
filenames = list(map(lambda x: x.name, path.glob('*.jpg')))

len(filenames) # size of the file names

filenames[:10]

np.random.seed(10) # this means whenever a random seed of 10 is done the same output will be presented
np.random.shuffle(filenames)

age_labels, image_path = [], []   # 2 empty lists created to save with the correspending real value for data preprocess step

for filename in filenames:
    image_path.append(filename)           # what here is actually doing taking the image file name where the image name is as follows ex: age_gender_ethnicty_imageID and appends it to the list
    temp = filename.split('_')            # spliting the filesname by delimeter _
    age_labels.append(temp[0])            # where the age index is the first so it takes it and appends it in the empty list of the age_labels

image_path[:10]

df = pd.DataFrame()
df['image'], df['age'] = image_path, age_labels  #images path and age labels is set into a dataframe helps with exploring the data

df.head()

df = df.astype({'age':'float32'}) # the age is set to a floating point

img = Image.open("/content/drive/MyDrive/archive.zip (Unzipped Files)/utkface_aligned_cropped/UTKFace/"+df.image[4]) #using the PIL to plot an image and load it from a specfic index from the dataframe
plt.imshow(img)

sns.distplot(df.age) #seaborn libary slects the age from the dataframe to plot in a histogram

files = df.iloc[0:20] # first 30 rows from the dataframe
plt.figure(figsize=(10,10))
for index, file, age in files.itertuples():  #each row contains the filename of an image with the corresponding age label then its loaded accordingly from the specified directory
    plt.subplot(5,5, index+1)                #and then converted to numpy array
    img = load_img("/content/drive/MyDrive/archive.zip (Unzipped Files)/utkface_aligned_cropped/UTKFace/"+file)
    img = np.array(img)
    plt.imshow(img)
    plt.title(f"Age: {age} ")
    plt.axis('off')

train, test = train_test_split(df, test_size=0.20, random_state=42) # the split step for the ML train and test samples with the we will split 2 different dataframes test -> for test data train -> for training data
                                                                    # this function splits the df(dataframe to a train and test set) then specifing the test size set into 20% and training is 80% of the whole dataset

train.head() # showing the first 5 rows after spliting the data accordingly of the train set

test.head() # test set

train.shape # the shape of the set splited the amount of the train samples we will have and the 2 dataframes we have

test.shape # test shape

#taking the input values creating an empty list for x_train to store the images then an iteration process for each in image file path column of the training df
# then in the loop each image file is loaded then we can specify a resize process for the image then the images is converted into an array then its appended into the list
x_train = []

for file in train.image:
    img = load_img("/content/drive/MyDrive/archive.zip (Unzipped Files)/utkface_aligned_cropped/UTKFace/" + file)
    img = img.resize((128, 128), Image.ANTIALIAS)
    img = np.array(img)
    x_train.append(img)

x_train = np.array(x_train)                        #This is the list containing numPy arrays representing the resized images from the training set
                                                     #each element of the list is a numPy array is representing an image.

x_train = x_train.reshape(len(x_train), 128, 128, 3) #this will be the output layer of NN layer

x_train.shape # showing the shape of the training after the preprocess step

x_train = x_train / 255 # normalizing the data ito a range between 0 and 1 to help model in a good way of learning procedure it should be in this kind of small values being in a certain range

y_age = np.array(train.age) #this array will be our target value containing the age labels for the training set for our machine learning model

input_size = (128,128,3) # the dimensions of the input images for the NN model

inputs = Input(shape=input_size)
X = Conv2D(64, (3, 3), activation='relu')(inputs)
X = BatchNormalization(axis=3)(X)
X = MaxPooling2D((3, 3))(X)

X = Conv2D(128, (3, 3), activation='relu')(X)
X = MaxPooling2D((2, 2), strides=(2, 2))(X)

X = Conv2D(256, (3, 3), activation='relu')(X)
X = MaxPooling2D((2, 2))(X)

# Flatten layer
X = Flatten()(X)

# Dense layers
dense_1 = Dense(256, activation='relu')(X)
dense_2 = Dense(256, activation='relu')(X)
dense_3 = Dense(128, activation='relu')(dense_2)

# Dropout layers
dropout_1 = Dropout(0.4)(dense_1)
dropout_2 = Dropout(0.4)(dense_3)

# Output layer for age prediction
output_2 = Dense(1, name='age_output')(dropout_2)

# Define the model
model = Model(inputs=inputs, outputs=output_2)

model.compile(loss='mae', optimizer='adam', metrics=['mae'])

model_history = model.fit(x=x_train, y=y_age, batch_size=16, epochs=20, validation_split=0.1)

# Plotting the training and validation loss over epochs
plt.plot(model_history.history['loss'])
plt.plot(model_history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()

index = 30
print("Original Age:", y_age[index])

# Predict age using the model
pred_age = model.predict(x_train[index].reshape(1, 128, 128, 3))[0][0]
print("Predicted Age:", pred_age)

# Display the image
plt.imshow(x_train[index])
plt.title("Original Image")
plt.axis('off')
plt.show()

index = 4
print("Original Age:", y_age[index])

# Predict age using the model
pred_age = model.predict(x_train[index].reshape(1, 128, 128, 3))[0][0]
print("Predicted Age:", pred_age)

# Display the image
plt.imshow(x_train[index])
plt.title("Original Image")
plt.axis('off')
plt.show()

