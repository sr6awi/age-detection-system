# -*- coding: utf-8 -*-
"""First training with UTKface.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L_VSh6yUqKOwroSFGgaylSCWWy5ngBsb
"""

from google.colab import drive

# Mount Google Drive to access files
drive.mount('/content/drive')

def load_images(path, target_size=(32, 32)):
    for img_name in os.listdir(path):
        ages = int(img_name.split("_")[0])
        genders = int(img_name.split("_")[1])

        # Load image and resize
        img = cv2.imread(os.path.join(path, img_name))
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        img = cv2.resize(img, target_size)  # Resize image
        img = img / 255.0  # Normalize pixel values

        yield img, ages, genders

path = "UTKFace/UTKFace"
images = []
age = []
gender = []

import cv2
import numpy as np
import os
from sklearn.model_selection import train_test_split
from keras.utils import to_categorical

path = "/content/drive/MyDrive/archive.zip (Unzipped Files)/utkface_aligned_cropped/UTKFace"
images = []
age = []
gender = []

for img, ages, genders in load_images(path):
    images.append(img)
    age.append(ages)
    gender.append(genders)

x_train_age, x_test_age, y_train_age, y_test_age = train_test_split(images, age, random_state=42)
x_train_gender, x_test_gender, y_train_gender, y_test_gender = train_test_split(images, gender, random_state=42)

from keras.models import Sequential,load_model,Model
from keras.layers import Conv2D,MaxPool2D,Dense,Dropout,BatchNormalization,Flatten,Input
from sklearn.model_selection import train_test_split

age_model = Sequential()
age_model.add(Conv2D(128, kernel_size=3, activation='relu', input_shape=(32,32,3)))
#age_model.add(Conv2D(128, kernel_size=3, activation='relu'))
age_model.add(MaxPool2D(pool_size=3, strides=2))

age_model.add(Conv2D(128, kernel_size=3, activation='relu'))
#age_model.add(Conv2D(128, kernel_size=3, activation='relu'))
age_model.add(MaxPool2D(pool_size=3, strides=2))

age_model.add(Conv2D(256, kernel_size=3, activation='relu'))
#age_model.add(Conv2D(256, kernel_size=3, activation='relu'))
age_model.add(MaxPool2D(pool_size=3, strides=2))

#age_model.add(Conv2D(512, kernel_size=3, activation='relu'))
#age_model.add(Conv2D(512, kernel_size=3, activation='relu'))
#age_model.add(MaxPool2D(pool_size=3, strides=2))

age_model.add(Flatten())
age_model.add(Dropout(0.2))
age_model.add(Dense(512, activation='relu'))

age_model.add(Dense(1, activation='linear', name='age'))

age_model.compile(optimizer='adam', loss='mse', metrics=['mae'])
print(age_model.summary())

# Convert lists to NumPy arrays
x_train_age = np.array(x_train_age)
y_train_age = np.array(y_train_age)
x_test_age = np.array(x_test_age)
y_test_age = np.array(y_test_age)

# Check the shapes of the arrays
print('Shapes of x_train_age, y_train_age, x_test_age, y_test_age:')
print(x_train_age.shape, y_train_age.shape, x_test_age.shape, y_test_age.shape)

history1 = age_model.fit(x_train_age, y_train_age, validation_data=(x_test_age, y_test_age), epochs=50)

age_model.save('age_model_50epochs.h5')

import matplotlib.pyplot as plt
history = history1

#plot the training and validation accuracy and loss at each epoch
loss = history.history['loss']
val_loss = history.history['val_loss']
epochs = range(1, len(loss) + 1)
plt.plot(epochs, loss, 'y', label='Training loss')
plt.plot(epochs, val_loss, 'r', label='Validation loss')
plt.title('Training and validation loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

gender_model = Sequential()

gender_model.add(Conv2D(36, kernel_size=3, activation='relu', input_shape=(32,32,3)))

gender_model.add(MaxPool2D(pool_size=3, strides=2))
gender_model.add(Conv2D(64, kernel_size=3, activation='relu'))
gender_model.add(MaxPool2D(pool_size=3, strides=2))

gender_model.add(Conv2D(128, kernel_size=3, activation='relu'))
gender_model.add(MaxPool2D(pool_size=3, strides=2))

#gender_model.add(Conv2D(256, kernel_size=3, activation='relu'))
#gender_model.add(MaxPool2D(pool_size=3, strides=2))

#gender_model.add(Conv2D(512, kernel_size=3, activation='relu'))
#gender_model.add(MaxPool2D(pool_size=3, strides=2))

gender_model.add(Flatten())
gender_model.add(Dropout(0.2))
gender_model.add(Dense(512, activation='relu'))
gender_model.add(Dense(1, activation='sigmoid', name='gender'))

gender_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Convert lists to NumPy arrays for gender model
x_train_gender = np.array(x_train_gender)
y_train_gender = np.array(y_train_gender)
x_test_gender = np.array(x_test_gender)
y_test_gender = np.array(y_test_gender)

# Check the shapes of the arrays for gender model
print('Shapes of x_train_gender, y_train_gender, x_test_gender, y_test_gender:')
print(x_train_gender.shape, y_train_gender.shape, x_test_gender.shape, y_test_gender.shape)

history_gender = gender_model.fit(x_train_gender, y_train_gender,validation_data=(x_test_gender, y_test_gender), epochs=50)

gender_model.save('gender_model_50epochs.h5')

history = history_gender
acc = history.history['accuracy']
#acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
#val_acc = history.history['val_accuracy']

plt.plot(epochs, acc, 'y', label='Training acc')
plt.plot(epochs, val_acc, 'r', label='Validation acc')
plt.title('Training and validation accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

