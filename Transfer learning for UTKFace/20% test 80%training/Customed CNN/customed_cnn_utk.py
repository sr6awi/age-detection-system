# -*- coding: utf-8 -*-
"""Customed CNN UTK.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TF6tZbwmIa-bwnRu-K0ZSX6XvGU2izI4
"""

import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
import cv2
from keras.models import Sequential,load_model,Model
from keras.layers import Conv2D,MaxPool2D,Dense,Dropout,BatchNormalization,Flatten,Input,GlobalAveragePooling2D,MaxPooling2D
from sklearn.model_selection import train_test_split
from tqdm import tqdm  # for the progress bar
from google.colab import drive
import zipfile

# mounting google drive
drive.mount('/content/drive')

# path to the zip file
zip_path = '/content/drive/MyDrive/archive (6).zip'
extract_path = '/content/UTKFace'

# extract the zip file
with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

def load_images_from_folder(folder, img_size=(150, 150)):
    images = [] #empty list to append the data to them
    ages = []

    # listing all the files in the folder
    file_list = os.listdir(folder)

    for img_name in tqdm(file_list):  #for progress bar
        age = int(img_name.split("_")[0]) # since the age is the data we need spliting it from the first index by delimeter
        img_path = os.path.join(folder, img_name)
        img = cv2.imread(img_path) #reading the image
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) #RGB 3 chanels
        img = cv2.resize(img, img_size) #resizing the image 128 , 128
        img = img / 255.0  # Scaling the images in a range 0 and 1
        images.append(img) #appending it to the empty list of the images list
        ages.append(age) # same for the age

    return np.array(images), np.array(ages) # returning them as numpy array [matrix of scaled image]

# Path to the extracted folder
folder_path = '/content/UTKFace/utkface_aligned_cropped/UTKFace'

# Load images and ages
images, ages = load_images_from_folder(folder_path)

#spliting the dataset into train and test
x_train, x_test, y_train, y_test = train_test_split(images, ages, test_size=0.20, random_state=42)

x_train[1]

x_test[1]

x_train.shape

x_test.shape

#the age distribution
plt.hist(y_train, bins=20, color='red', edgecolor='black')
plt.title('Age Distribution')
plt.xlabel('Age')
plt.ylabel('Amount of samples')
plt.grid(True)
plt.show()

#a function to display images with their corresponding ages
def show_samples(images, ages, num_samples=5):
    fig, axes = plt.subplots(1, num_samples, figsize=(15, 15))
    for i in range(num_samples):
        axes[i].imshow(images[i])
        axes[i].set_title("Age: {}".format(ages[i]))
        axes[i].axis('off')
    plt.show()

# show some samples from the training set using the function created
show_samples(x_train, y_train)

from keras.applications import MobileNets
# Load the MobileNet model with pretrained ImageNet weights
base_model = MobileNet(weights='imagenet', include_top=False, input_shape=(150, 150, 3))

# Freeze the layers of MobileNet model
for layer in base_model.layers:
    layer.trainable = False

# Define the model
age_model = Sequential()

# Add convolutional layers
age_model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)))
age_model.add(MaxPooling2D((2, 2)))
age_model.add(BatchNormalization())
age_model.add(Conv2D(64, (3, 3), activation='relu'))
age_model.add(MaxPooling2D((2, 2)))
age_model.add(BatchNormalization())

# Flatten the feature maps
age_model.add(Flatten())

# Add fully connected layers
age_model.add(Dense(256, activation='relu'))
age_model.add(Dropout(0.5))
age_model.add(Dense(1, activation='linear', name='age'))

from keras.optimizers import Adam
age_model.compile(optimizer=Adam(learning_rate=0.0001), loss='mae', metrics=['mae'])

from tensorflow.keras.utils import plot_model
plot_model(age_model)

import tensorflow as tf
from tensorflow.keras.callbacks import EarlyStopping

# call back function to stop the training once the model is over fitting when the val_loss after patience of 5 epochs will stop the training
early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)

#training the model

history_age = age_model.fit(x_train , y_train, validation_data=(x_test, y_test), epochs=20 , shuffle = True, batch_size = 32,callbacks=[early_stop])

import matplotlib.pyplot as plt
# Plot the training and validation loss
loss = history_age.history['loss']
val_loss = history_age.history['val_loss']
epochs = range(1, len(loss) + 1)
plt.plot(epochs, loss, 'y', label='Training loss')
plt.plot(epochs, val_loss, 'r', label='Validation loss')
plt.title('Customed CNN 20% 32 0.5 drop batchnor Training and validation loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

test_loss, test_mae = age_model.evaluate(x_test, y_test)
print(f"Test Loss: {test_loss}")
print(f"Test MAE: {test_mae}")

# Select an index
index_to_test = 1

# Preprocess the selected test image
test_image = x_test[index_to_test]
test_image = np.expand_dims(test_image, axis=0)  # Add batch dimension

# Predict the age of the test image using the trained model
predicted_age = age_model.predict(test_image)[0][0]

# Get the actual age of the test image
actual_age = y_test[index_to_test]

# Visualize the input image along with the predicted and actual ages
plt.imshow(x_test[index_to_test])
plt.title(f'Predicted Age: {predicted_age}, Actual Age: {actual_age}')
plt.axis('off')
plt.show()

# Select an index corresponding to the image you want to test
index_to_test = 1 # Change this index to test a different image

# Preprocess the selected test image
test_image = x_test[index_to_test]
test_image = np.expand_dims(test_image, axis=0)  # Add batch dimension

# Predict the age of the test image using the trained model
predicted_age = age_model.predict(test_image)[0][0]

# Get the actual age of the test image
actual_age = y_test[index_to_test]

# Visualize the input image along with the predicted and actual ages
plt.imshow(x_test[index_to_test])
plt.title(f'Predicted Age: {predicted_age}, Actual Age: {actual_age}')
plt.axis('off')
plt.show()

# Select an index corresponding to the image you want to test
index_to_test = 112 # Change this index to test a different image

# Preprocess the selected test image
test_image = x_test[index_to_test]
test_image = np.expand_dims(test_image, axis=0)  # Add batch dimension

# Predict the age of the test image using the trained model
predicted_age = age_model.predict(test_image)[0][0]

# Get the actual age of the test image
actual_age = y_test[index_to_test]

# Visualize the input image along with the predicted and actual ages
plt.imshow(x_test[index_to_test])
plt.title(f'Predicted Age: {predicted_age}, Actual Age: {actual_age}')
plt.axis('off')
plt.show()