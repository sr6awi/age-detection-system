# -*- coding: utf-8 -*-
"""GPU benchmark with image classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_ux-eziAX_czFtbaHV7rwXiH-nzgAzav
"""

import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
import numpy as np

tf.config.experimental.list_physical_devices()

tf.test.is_built_with_cuda()

(X_train,y_train),(X_test,y_test) = tf.keras.datasets.cifar10.load_data()

X_train.shape

y_train[0:5]

def plot_sample(index):
  plt.figure(figsize=(10,1))
  plt.imshow(X_train[index])

plot_sample(0)

plot_sample(1)

plot_sample(2)

classes = ["airplane","automobile","bird","cat","deer","frog","horse","ship","truck"]

plot_sample(3)

y_train[3]

classes[y_train[3][0]]

plot_sample(9)

y_train[9]

classes[y_train[9][0]]

X_train[0]/255

X_test.shape

X_train_scaled = X_train/255
X_test_scaled = X_test/255

X_train_scaled.shape #now the values are just between 0 and 1 we scaled it up to help our deep learning

y_train

y_test

y_train_categorical = keras.utils.to_categorical(
    y_train , num_classes=10, dtype='float32'
)
y_train_categorical[:6]   #one hot encoding

y_test_categorical = keras.utils.to_categorical(
    y_test , num_classes=10, dtype='float32'
)

y_train # if its not encoded we will use sparse categorical crossentropy

y_train_categorical # this one hot encoded thats why we will use categorical crossentropy

model = keras.Sequential([
    keras.layers.Flatten(input_shape=(32,32,3)),
    keras.keras.layers.Dense(3000,activation='relu'),#in hidden layer "relu" activation function is prefered
    keras.keras.layers.Dense(1000,activation='relu'),
    keras.layers.Dense(10,activation='sigmoid') #sigmoid is good with classification
                          ])
model.compile(optimizer='SGD',
              loss = 'categorical_crossentropy',
              metrics = ['accuracy'])

model.fit(X_train_scaled,y_train_categorical)

classes[np.argmax(model.predict(X_test_scaled)[9])]

classes[y_test[9][0]]

model.evaluate(X_test_scaled,y_test_categorical)

from tensorflow.keras.models import load_model