# -*- coding: utf-8 -*-
"""droput_regularization with sonar_dataset ANN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jhVEbIMBklHuY34N79bXGyRS4cMuxb2M
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv("./sonar_dataset.csv", header=None)# this dataset doesnt contain header
df.sample(5)

df.shape

df.columns

df[60].value_counts()

X=df.drop(60,axis='columns')
y=df[60]
X.head()

y.head()

y

y = pd.get_dummies(y, drop_first=True)
y.sample(5) # R -> 1 and M -> 0

y.value_counts()

#first step in ML divide our data into Xtrain and Xtest y train and ytest
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1)
#random state means divide it into similar type of splits

X_train.shape

X_test.shape

y_train.shape

y_test.shape

len(X_train)

import tensorflow as tf
from tensorflow import keras

model = keras.Sequential([
    keras.layers.Dense(60, input_dim=60, activation='relu'),
    keras.layers.Dense(30, activation='relu'),
    keras.layers.Dense(15, activation='relu'),
    keras.layers.Dense(1, activation='sigmoid')
])

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

model.fit(X_train, y_train, epochs=100, batch_size=8)

model.evaluate(X_test,y_test)

y_pred = model.predict(X_test).reshape(-1)
print(y_pred[:15])

# round the values to nearest integer  0 or 1
y_pred = np.round(y_pred)
print(y_pred[:15])

y_test[:15]

from sklearn.metrics import confusion_matrix , classification_report

print(classification_report(y_test, y_pred))

#using droput layer
modeld = keras.Sequential([
    keras.layers.Dense(60, input_dim=60, activation='relu'),
    keras.layers.Dropout(0.5), #good practice to add a dropout layer after every hidden layer
    keras.layers.Dense(30, activation='relu'),
    keras.layers.Dropout(0.5),
    keras.layers.Dense(15, activation='relu'),
    keras.layers.Dropout(0.5),
    keras.layers.Dense(1, activation='sigmoid')
])

modeld.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

modeld.fit(X_train, y_train, epochs=100, batch_size=8)

modeld.evaluate(X_test,y_test)

#Training Accuracy is still good but Test Accuracy Improved

y_pred = modeld.predict(X_test).reshape(-1)
print(y_pred[:10])

# round the values to nearest integer  0 or 1
y_pred = np.round(y_pred)
print(y_pred[:10])

from sklearn.metrics import confusion_matrix , classification_report

print(classification_report(y_test, y_pred))

